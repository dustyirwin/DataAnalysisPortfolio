### A Pluto.jl notebook ###
# v0.19.36

using Markdown
using InteractiveUtils

# ╔═╡ a41b8530-e1f8-4c8b-9573-e9e9bb1600c3
# loading libraries
begin
	using CSV, DataFramesMeta, StatsBase, Dates, HypothesisTests
	using StatsPlots, ColorSchemes, Measures, LaTeXStrings
	using MLJ, MLJLinearModels, StatsAPI
	using DataStructures, PlutoUI
end

# ╔═╡ d2e09f4f-9f2a-4d66-93fb-3f0bd56d6f7f
md"""# Marketing to Sales Model

In this analysis we will be checking the influence of budgeted dollars (in millions US) on various marketing channels (TV, Radio, Social Media and Influencer) against the sales of those channels. We will build a linear regession model from the sales data to estimate future sales based on marketing budgets and channels and verifying assumptions for soundness of the model.
"""

# ╔═╡ b539a10b-00c4-4ec2-8a54-8c1415378e2a
md""" ## Data Exploration
"""

# ╔═╡ d2ef995d-79c6-4e2f-817a-84fc54641ccb
md" TV level and Radio to mean Sales shows a clear positive relationship, however, the Influencer level and Social Media to mean Sales do not show a clear linear relationship and may not be a good predictor of Sales.
"

# ╔═╡ 9d197926-c602-4d1a-823d-2c8861c832d2
md"""
## Linearity Assumption
"""

# ╔═╡ ed3b1b91-87ad-4877-adfd-bde0c21ad9e5
md"""
There appears to be a strong positive linear relationship between the Sales and Radio variables and a fuzzy relationship between Sales and Social_Media. 
"""

# ╔═╡ 0a714eb3-1b12-4271-bee5-810e37b8f7d7
md"""
## Model Selection and Validation

Selected model:
"""

# ╔═╡ 0fe6f042-2362-4e56-ad7a-484dc6a0712d
md"Model evaluation:"

# ╔═╡ 1b5ed262-4999-4808-ad0a-9d14834a2834
md""" 
## Checking Model Assumptions
### Independence

The marketing promotions are independent from each other, e.g. one promotion does preclude another from occuring. However, one promotion may influence the sales generated by another promotion as most people would only take one promotion if offered multiple promotions at the same time or within a similar period. We should verify that these promotions did not overlap by region or time period.

### Normality of Residuals
"""

# ╔═╡ 1af61550-ffa7-4bb9-8ab1-4acbd27a139c
md""" The residuals appear to mostly normally distributed, with some left-skwedness occuring.

### Constant Variance
"""

# ╔═╡ 32dbf732-155f-4e8d-ba95-7aee1dd3b104
md"""
The residuals appear to be evenly distributed around 0, validating that the constant variance assumption is met.

### No Multicollinearity

To check for no multicollinearity in the variables, we calculate the Variance Inflation Factor. VIF has recently been merged to the StatsAPI.jl ([VIF #26](https://github.com/JuliaStats/StatsAPI.jl/pull/26)) library and will hopefully be made available to the MLJ ecosystem soon. 

In the meantime, because we are using only one continuous variable (Radio), there should not be any multicollinearity, despite a noticeable positive correlation between Radio and Social_Media variables.

## Model Predictions
"""

# ╔═╡ 15fa6c07-96b0-45ba-81dd-f33e4207264a
md"""
The model seems to be predicting well on the holdout data, indicating that the model is not overfit and should generalize well to new data. 

Note: I'm not sure if the ribbon param is being assigned to the residuals correctly, more research is needed.
""" 

# ╔═╡ afa8cb01-d006-42a5-b9e6-33057d5bf902
md"""
# Appendix A
"""

# ╔═╡ 0b940d1b-cf75-4c70-a0bf-0bdf0c4632a3
raw_data = CSV.File(joinpath(@__DIR__, "..", "_data","marketing_sales_data.csv.gz"), normalizenames=true) |> DataFrame

# ╔═╡ e020ee6e-3624-402e-b6ca-3d733fbab01c
sales_data = let
	coerce!(raw_data, 
		:TV => Multiclass,
		:Radio => Continuous,
		:Social_Media => Continuous,
		:Influencer => Multiclass,
		:Sales => Continuous
	)
	#sort!(df, :Radio)
end

# ╔═╡ 47d29516-4563-4b62-8843-32d13df452b1
describe(sales_data)

# ╔═╡ 83550f49-e1cf-4b81-b1f2-b5259882aabb
let
	grpTV = groupby(sales_data, :TV)
	dfTV = combine(grpTV, :Sales=>mean)

	grpInf = groupby(sales_data, :Influencer)
	dfInf = combine(grpInf, :Sales =>mean)

	dfTV, dfInf
end

# ╔═╡ e9e136ae-ee1d-496a-9a77-39b8563f8601
let
	df = select(sales_data, :Radio, :Social_Media, :Sales)
	cornerplot(Matrix(df), labels=names(df), size=(800,800))
end

# ╔═╡ 1ff4d86b-bcae-41c9-9e12-d63a82d44921
md"""
## Data Cleaning Record
1. Changed variable name `Social Media` to `Social_Media`
"""

# ╔═╡ df9f208d-0615-46af-a590-5d0846f1e221
md"""
## Compatible MLJ Models
"""

# ╔═╡ fdb45fba-fcc3-47e5-934a-c32c45ad2377
model = MLJLinearModels.LinearRegressor()

# ╔═╡ f8a63835-3750-4503-9c41-22613839465f
model

# ╔═╡ 213bcdc8-ce7a-477e-a9b6-880e358d66cf
holdout_split = 0.70

# ╔═╡ c4fa8f33-539f-4d7e-925f-c66a93ee39fb
md"## Training Data"

# ╔═╡ 5d90cf91-a60d-44e3-a614-e09a840a6467
W_data = select(sales_data, Not([:Social_Media, :Influencer]))

# ╔═╡ 1369ac57-07f5-4f07-9228-922da5fa5d9c
onehot = machine(OneHotEncoder(), W_data) |> fit!

# ╔═╡ f63d8600-375d-4b38-bd91-0a3ef8793167
W = MLJ.transform(onehot, W_data)

# ╔═╡ 266f3532-543f-47ec-9b92-d4db6c18919a
Xtrain, Xtest = partition(select(W, Not(:Sales)), holdout_split)

# ╔═╡ 72efa630-6efd-4c73-802a-e0a4cac17064
ytrain, ytest = partition(W.Sales, holdout_split)

# ╔═╡ 9b0d1364-f93b-4c45-b8aa-3b4b91ebf3f9
models(matching(Xtrain,ytrain)) |> DataFrame

# ╔═╡ 2950e503-44f4-403d-8686-a9423f56425d
mach = machine(model, Xtrain, ytrain) |> fit!

# ╔═╡ 5e220a6b-42d4-4bbf-8341-d55c6add669b
let
	holdout = Holdout(fraction_train=holdout_split)
	evaluate!(mach, measure=[l1, rmse, mae, rsquared])
end

# ╔═╡ 1213e792-d712-44eb-b9da-d532f3a3b2db
# VIF available for GLM models, not MLJ models as of 9/26/23
StatsAPI.vif(mach.model)

# ╔═╡ ff97f4c2-60fe-48f2-abe5-7e44cdaabb6d
p = MLJ.predict(mach, Xtrain)

# ╔═╡ b1913479-0556-4fa2-baf7-8336ce30cf44
p̂ = MLJ.predict(mach, Xtest)

# ╔═╡ b91ec155-b9d8-407f-a26a-5469ce465b58
r = p - ytrain

# ╔═╡ 3acd439f-1971-4e6d-85b5-bebd4e228389
let
	p1 = qqnorm(r)
	p2 = histogram(r)
	plot(p1,p2, size=(800,400), legend=true, label="r̂")
end

# ╔═╡ f67a68fb-1dd6-4465-9e36-4438bd4f837d
scatter(p, r, smooth=true, legend=false, yaxis="residuals", xaxis="fitted values")

# ╔═╡ 67417197-a0ed-4fff-ae61-933cd891026f
let
	W1 = @subset(W, :TV__High .== 1)
	s1 = scatter(W1.Radio, W1.Sales, smooth=true, ribbon=r/2, label="TV - High")

	W2 = @subset(W, :TV__Medium .== 1)
	s2 = scatter!(W2.Radio, W2.Sales, smooth=true, ribbon=r/2, label="TV - Medium")

	W3 = @subset(W, :TV__Low .== 1)
	s3 = scatter!(W3.Radio, W3.Sales, smooth=true, ribbon=r/2, 
		legend=true, label="TV - Low", xaxis="Radio", yaxis="Sales", size=(800,500), margin=5mm)
end

# ╔═╡ 7f720720-fa09-4795-ae2f-c40e4cebe263
r̂ = p̂ - ytest

# ╔═╡ 13001d40-021a-4f26-967f-b40d7f905580
md"""
# Appendix B
"""

# ╔═╡ 8e4ebeb2-5ac0-44e3-ab0e-f1741fc53a16
space = "<br><br><br>" |> HTML

# ╔═╡ 5f480a92-0b15-4606-8df1-dbfb9c8d34e7
space

# ╔═╡ f27c2708-5c73-423a-b16e-ecfde593e9d0
space

# ╔═╡ a909fa45-6cdb-49ad-86bb-6a31dd5f113d
PlutoUI.TableOfContents()

# ╔═╡ 1ea6b1f2-e450-4755-9dc9-b1f78ad3db6b
# page/cell width control
"""
<style>
	main {
	max-width: 1100px;
	align-left: flex-start;
	margin-left: 50px;
	}
""" |> HTML

# ╔═╡ Cell order:
# ╠═d2e09f4f-9f2a-4d66-93fb-3f0bd56d6f7f
# ╠═e020ee6e-3624-402e-b6ca-3d733fbab01c
# ╠═b539a10b-00c4-4ec2-8a54-8c1415378e2a
# ╠═47d29516-4563-4b62-8843-32d13df452b1
# ╠═83550f49-e1cf-4b81-b1f2-b5259882aabb
# ╠═d2ef995d-79c6-4e2f-817a-84fc54641ccb
# ╠═9d197926-c602-4d1a-823d-2c8861c832d2
# ╠═e9e136ae-ee1d-496a-9a77-39b8563f8601
# ╠═ed3b1b91-87ad-4877-adfd-bde0c21ad9e5
# ╠═0a714eb3-1b12-4271-bee5-810e37b8f7d7
# ╠═f8a63835-3750-4503-9c41-22613839465f
# ╠═0fe6f042-2362-4e56-ad7a-484dc6a0712d
# ╠═5e220a6b-42d4-4bbf-8341-d55c6add669b
# ╠═1b5ed262-4999-4808-ad0a-9d14834a2834
# ╠═3acd439f-1971-4e6d-85b5-bebd4e228389
# ╠═1af61550-ffa7-4bb9-8ab1-4acbd27a139c
# ╠═f67a68fb-1dd6-4465-9e36-4438bd4f837d
# ╠═32dbf732-155f-4e8d-ba95-7aee1dd3b104
# ╠═67417197-a0ed-4fff-ae61-933cd891026f
# ╠═15fa6c07-96b0-45ba-81dd-f33e4207264a
# ╠═5f480a92-0b15-4606-8df1-dbfb9c8d34e7
# ╠═afa8cb01-d006-42a5-b9e6-33057d5bf902
# ╠═0b940d1b-cf75-4c70-a0bf-0bdf0c4632a3
# ╠═1ff4d86b-bcae-41c9-9e12-d63a82d44921
# ╠═df9f208d-0615-46af-a590-5d0846f1e221
# ╠═1213e792-d712-44eb-b9da-d532f3a3b2db
# ╠═9b0d1364-f93b-4c45-b8aa-3b4b91ebf3f9
# ╠═fdb45fba-fcc3-47e5-934a-c32c45ad2377
# ╠═213bcdc8-ce7a-477e-a9b6-880e358d66cf
# ╠═2950e503-44f4-403d-8686-a9423f56425d
# ╠═ff97f4c2-60fe-48f2-abe5-7e44cdaabb6d
# ╠═b91ec155-b9d8-407f-a26a-5469ce465b58
# ╠═b1913479-0556-4fa2-baf7-8336ce30cf44
# ╠═7f720720-fa09-4795-ae2f-c40e4cebe263
# ╠═c4fa8f33-539f-4d7e-925f-c66a93ee39fb
# ╠═5d90cf91-a60d-44e3-a614-e09a840a6467
# ╠═1369ac57-07f5-4f07-9228-922da5fa5d9c
# ╠═f63d8600-375d-4b38-bd91-0a3ef8793167
# ╠═266f3532-543f-47ec-9b92-d4db6c18919a
# ╠═72efa630-6efd-4c73-802a-e0a4cac17064
# ╠═f27c2708-5c73-423a-b16e-ecfde593e9d0
# ╠═13001d40-021a-4f26-967f-b40d7f905580
# ╠═8e4ebeb2-5ac0-44e3-ab0e-f1741fc53a16
# ╠═a41b8530-e1f8-4c8b-9573-e9e9bb1600c3
# ╠═a909fa45-6cdb-49ad-86bb-6a31dd5f113d
# ╠═1ea6b1f2-e450-4755-9dc9-b1f78ad3db6b
